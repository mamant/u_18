var btn_timeout;
function loadingButton(elem, points){
	
	var string = $(elem).val();
	var loading_string = "Loading     ";
	
	for(i=0; i<points; i++)
		loading_string= loading_string.replace(" ","."); 
	$(elem).val(loading_string);
	if(points<5)
		btn_timeout=setTimeout(function(){ loadingButton(elem, points+1)}, 700);
    else
		btn_timeout=setTimeout(function(){ loadingButton(elem, 1)}, 700);
    
}

function loadingButtonReset(elem){
	var string = $(elem).attr("rel");
	$(elem).val(string);
    window.clearTimeout(btn_timeout);
}

function inArray(needle, haystack) {
    var length = haystack.length;
    for(var i = 0; i < length; i++) {
        if(haystack[i] == needle) return true;
    }
    return false;
}
function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds){
      break;
    }
  }
}
function successFunction(label, cform, submitBtnID){
    
    // Detect element
    var elem = $(label[0]).attr("for");
    var elem_value = $("#"+elem).val();
    
    var elem_info  = $("#"+elem).attr("info");
    if(!elem_info) elem_info = elem;
    
    /**
     * Hardcoded because ajax response is slow and the cnp get's validated somewhow
    */
    var cnpunique = $("#"+elem).attr("cnpunique");
    if (cnpunique=="false"){
        $("#"+elem).attr("aria-invalid", "true");
        return;
    }
    var group_valid = true;
    var group = cform.findGroup(elem);
    
    if(group!="")
    {
        var f =(cform.findGroupFields(group));
        for(d in f) 
            group_valid &= cform.valid($("#"+f[d]));   

    }
    
    if(group=="nr"){
        var f =(cform.findGroupFields(group));
        for(d in f){
            if( $("#"+f[d]).attr("aria-invalid")=="true" ){
                cform.valid($("#"+f[d]));
                $("#"+f[d]).trigger("blur");
                group_valid = false;
                break;
            }
            else
                group_valid &= cform.valid($("#"+f[d]));   
        } 
        
    }
    // Put ok icon
    if(group_valid){
        
        $("#"+elem_info+"_info").removeClass('error').addClass('ok');
        $("#"+elem_info+"_info > .message").html("");
        var hintname  = $("#"+elem).attr("hintname");
        if(!hintname) hintname=elem_info;
        
        // Success Hints
        var hintFields = ["insured_last_name", "insured_first_name", "addresscheckout", "zip_codecheckout", ""];
        
        //console.log("Validation:");
        //console.log(hintname);
        //console.log(inArray(hintname,hintExceptions));
        //console.log("Validation end;");
        
        if(!inArray(hintname,hintFields))
        {
            var hint_id =   $("#"+elem_info+"_info > .message").attr("hint_id");
            var hint_data = $("#"+elem_info+"_info > .message").attr("hint_data");
            
            if ( elem_value!="" )
            {
                if( ( hint_data!="" && hint_data!="-" && hint_id!=elem_value) )
                {
    
                    $.ajax({
                        type: 'post',
                        url: '/data/hint/?'+hintname,
                        data: {field_name:hintname, field_value:elem_value, field_context:'checkout'},
                        success: function(data) {
                            $("#"+elem_info+"_info > .message").html(data);
                            $("#"+elem_info+"_info > .message").attr("hint_id", elem_value);
                            if(data!="")
                                $("#"+elem_info+"_info > .message").attr("hint_data", data);
                            else
                                $("#"+elem_info+"_info > .message").attr("hint_data", "-");
                        }
                    });
                    
                }else{
                    if(hint_data!="-")
                        $("#"+elem_info+"_info > .message").html(hint_data);
                }
                
            }
            
        }
        
    }
    
    // Check form to detect all fields and statuses
    cform.checkForm();
    
    /**
    * Proper way to detect if form is complete 
    */
    var numberOfInvalids = cform.numberOfInvalids();
    var numberOfValids  = cform.validElements().length;
    var allElements = cform.currentElements.length;
    
    //console.log("Invalid("+numberOfInvalids+") + Valid(" + numberOfValids + ")  = "+allElements);
    /*
    console.log("#### "+elem+" ###########\r\n");
    console.log("Invalid:");
    console.log(cform.invalid);
    console.log("Current:");
    console.log( cform.currentElements );
    console.log("Valid:");
    console.log(cform.validElements());
    console.log("Invalid("+numberOfInvalids+") + Valid(" + numberOfValids + ")  = "+allElements);
    console.log("###########\r\n");
    */
    
    
    if( numberOfInvalids==0 && numberOfValids == allElements && allElements >0 &&  numberOfValids > 0){
        $( "#"+$("#"+submitBtnID).attr("progress") ).removeClass("normal").addClass("ok");
        $("#"+submitBtnID).addClass("green");
    }else{
        $( "#"+$("#"+submitBtnID).attr("progress") ).removeClass("ok").addClass("normal");
        $("#"+submitBtnID).removeClass("green");
    }
    
}


$(document).ready(function() {
    
    
    // Library function
    $.validator.setDefaults({
        errorPlacement: function(error, element) {
            var elem_name = $(element).attr("name");
            var elem_info  = $(element).attr("info");
            if(!elem_info) elem_info = elem_name;
            if(error[0].innerHTML) $("#"+elem_info+"_info > .message").html(error[0].innerHTML);
        }
    });

    // Library function
    $.validator.setDefaults({
		highlight: function(element, errorClass) {
            var elem_name = $(element).attr("name");
            
            var elem_info  = $(element).attr("info");
            if(!elem_info) elem_info = elem_name;
            //console.log(elem_name+": "+elem_info);
                
            $("#"+elem_info+"_info").removeClass("normal").removeClass("ok").addClass("error");
            var ins = $("#"+elem_info+"_info input");
            var group_valid = true;
            for(var it in ins){
              if($("ins").attr("aria-invalid")=="false"){
                group_valid = false      
                break;
              }
            }
            if(group_valid==true){
                $( "#"+$("#"+$(this.currentForm).attr("id") + " input[type=submit]").attr("progress") ).removeClass("ok").addClass("normal");
                $("#"+$(this.currentForm).attr("id") + " input[type=submit]").removeClass("green");
            }
		}
    });
    
    // Library function
    $.validator.prototype.findGroup = function(field){
        groups = this.groups;
        groups_keys={};
        for(g in groups){ c = (groups[g]).split(/\s/); for(b in c) groups_keys[c[b]] = g;}
                
        if(typeof groups_keys[field] != 'undefined'){
            return groups_keys[field];
        }else{
            return false;
        }
    }
    
    // Library function
    $.validator.prototype.findGroupFields = function(group){
        groups = this.groups;
        return groups[group].split(/\s/);
    }
    
    $.validator.addMethod("iscounty", function(value) {
        var counties = [
            "AB", "AR", "AG", "BC", "BH", "BN", "BT", "BV", "BR", "BZ",
            "CS", "CL", "CJ", "CT", "CV", "DB", "DJ", "GL", "GR", "GJ",
            "HR", "HD", "IL", "IS", "IF", "MM", "MH", "MS", "NT", "OT",
            "PH", "SM", "SJ", "SB", "SV", "TR", "TM", "TL", "VS", "VL",
            "VN", "B"
        ];
        return $.inArray(value.toUpperCase(), counties) != -1;
    }, "Introduceti un prefix valid de judet.");    

    $.validator.addMethod("cnpunique", function(value, element, param) {
        var isSuccess = false;
        var cnpunique = $(element).attr("cnpunique"); 
        var cnpuniqueid = $(element).attr("cnpunique_id");
        if( cnpuniqueid==value )
            return cnpunique;
        else{
            $.ajax({ url: "/data/cnpunique/", 
                data: { cnp:value }, 
                async: false, 
                success: 
                    function(msg) { $(element).attr("cnpunique", isSuccess); $(element).attr("cnpunique_id", value);  $(element).attr("aria-invalid", value);  isSuccess = msg === "true" ? true : false }
            });
            return isSuccess;
            
        }

        
    }, $.validator.format("Acest CNP exista deja in sistem!"));
    

    $.validator.addMethod("onlyonce", function(value, element, param) {
        valid = true;
        $(".cnp").each(function(){
            var exists = false;
            var cnp_val = $(this).val();
            if(this!=element)
            {
                if(cnp_val==value && value!="")
                    valid = false;
            }
            return 1;
        });
        
        return valid;
    }, $.validator.format("Acest CNP a fost deja introdus!"));
    
    // Exact length
    $.validator.addMethod("exactlength", function(value, element,params) {
        if(params==false)
            return true;
        
        if(value.length == params)
            return true;
        else
            return false;
    }, $.validator.format("Trebuie sa contina fix {0} caractere"));

    // Starts with "+" ad 2-3 digits
    $.validator.addMethod("countrycode", function(value, element,params) {
        
        String.prototype.isNumber = function(){return /^\d+$/.test(this);}
        var value_part = (value.substr(1));
        if(value[0] == "+" && value_part.isNumber() && (value_part.length ==2 || value_part.length==3))
            return true;
        else
            return false;
            
    }, $.validator.format("Trebuie sa inceapa cu + si sa fie urmat de 2-3 cifre"));
    
    
    // Starts with "x"
    $.validator.addMethod("startwith", function(value, element,params) {
        if(value[0] == params)
            return true;
        else
            return false;
    }, $.validator.format("Trebuie sa inceapa cu {0}"));
    
    // Greather then tomorow date
    $.validator.addMethod("tomorowstart", function(value, element,params) {
        
        var d = value.split(".");
        var sdate = new Date(d[2], d[1], d[0]);
        sdate.setHours(0);
        sdate.setMinutes(0);
        sdate.setSeconds(0);
        var cdate = new Date()
        cdate.setHours(0);
        cdate.setMinutes(0);
        cdate.setSeconds(0);
        
        if(sdate > cdate)
            return true;
        else
            return false;
    }, $.validator.format("Data de inceput trebuie sa fie minim maine!"));

    $.validator.addMethod("lettersonly", function(value, element) {
      return this.optional(element) || /^[a-z]+$/i.test(value);
    }, "Sunt acceptate doar litere");
    
    // Alphanumeric
    $.validator.addMethod("alphanum", function(value, element) {
        if(value=="")
            return true;
        return /^[(a-z)(A-Z)(0-9)]+$/.test(value);
    }, "Trebuie sa contina doar caractere alfanumerice");

    // Stricter email
    $.validator.addMethod("strictemail", function(value, element) {
        if(value=="")
            return true;
        return /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(value);
    }, "Trebuie sa introduceti un email valid");

    // Alphanumeric +
    $.validator.addMethod("alphanumplus", function(value, element) {
        return /^[\w\-\s]+$/.test(value);
    }, "Trebuie sa contina doar caractere alfanumerice");

});